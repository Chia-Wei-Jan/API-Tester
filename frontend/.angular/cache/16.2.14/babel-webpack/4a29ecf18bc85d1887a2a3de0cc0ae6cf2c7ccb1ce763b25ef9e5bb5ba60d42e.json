{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.backendUrl = 'http://127.0.0.1:5000/run-tests'; // Flask backend URL\n  }\n\n  runTests() {\n    const results = [];\n    const executeApi = index => {\n      if (index >= this.apis.length) {\n        this.responses = results;\n        return;\n      }\n      const api = this.apis[index];\n      // Replace chain parameters with actual values from previous API responses\n      api.chainParams.forEach(chainParam => {\n        const sourceApiResponse = results[chainParam.sourceApiIndex].body;\n        let value = null;\n        if (typeof sourceApiResponse === 'object') {\n          value = this.searchKeyInJson(sourceApiResponse, chainParam.sourceKey);\n        } else if (typeof sourceApiResponse === 'string' && sourceApiResponse.trim().startsWith('<')) {\n          // Assume the response is XML\n          parseString(sourceApiResponse, (err, result) => {\n            if (!err) {\n              value = this.searchKeyInJson(result, chainParam.sourceKey);\n            }\n          });\n        }\n        if (value) {\n          const param = api.params.find(p => p.key === chainParam.key);\n          if (param) {\n            param.value = value;\n          }\n        }\n      });\n      const formattedApi = {\n        ...api,\n        body: api.method === 'POST' || api.method === 'PUT' ? api.jsonBody ? api.jsonBody : api.xmlBody : ''\n      };\n      this.apiService.runTests([formattedApi]).subscribe(data => {\n        results.push(data.responses[0]);\n        executeApi(index + 1);\n      });\n    };\n    executeApi(0);\n  }\n  // Function to search for a key in a JSON object\n  searchKeyInJson(obj, key) {\n    if (!obj || typeof obj !== 'object') return null;\n    if (obj.hasOwnProperty(key)) return obj[key];\n    for (const k in obj) {\n      if (obj.hasOwnProperty(k) && typeof obj[k] === 'object') {\n        const result = this.searchKeyInJson(obj[k], key);\n        if (result) return result;\n      }\n    }\n    return null;\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ApiService","constructor","http","backendUrl","runTests","results","executeApi","index","apis","length","responses","api","chainParams","forEach","chainParam","sourceApiResponse","sourceApiIndex","body","value","searchKeyInJson","sourceKey","trim","startsWith","parseString","err","result","param","params","find","p","key","formattedApi","method","jsonBody","xmlBody","apiService","subscribe","data","push","obj","hasOwnProperty","k","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/eddie/Local-Documents/API_test/frontend/src/app/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private backendUrl = 'http://127.0.0.1:5000/run-tests';  // Flask backend URL\n\n  constructor(private http: HttpClient) { }\n\n  runTests() {\n    const results = [];\n\n    const executeApi = (index: number) => {\n      if (index >= this.apis.length) {\n        this.responses = results;\n        return;\n      }\n\n      const api = this.apis[index];\n\n      // Replace chain parameters with actual values from previous API responses\n      api.chainParams.forEach(chainParam => {\n        const sourceApiResponse = results[chainParam.sourceApiIndex].body;\n        let value = null;\n        if (typeof sourceApiResponse === 'object') {\n          value = this.searchKeyInJson(sourceApiResponse, chainParam.sourceKey);\n        } else if (typeof sourceApiResponse === 'string' && sourceApiResponse.trim().startsWith('<')) {\n          // Assume the response is XML\n          parseString(sourceApiResponse, (err, result) => {\n            if (!err) {\n              value = this.searchKeyInJson(result, chainParam.sourceKey);\n            }\n          });\n        }\n        if (value) {\n          const param = api.params.find(p => p.key === chainParam.key);\n          if (param) {\n            param.value = value;\n          }\n        }\n      });\n\n      const formattedApi = {\n        ...api,\n        body: api.method === 'POST' || api.method === 'PUT' ? (api.jsonBody ? api.jsonBody : api.xmlBody) : ''\n      };\n\n      this.apiService.runTests([formattedApi]).subscribe((data: any) => {\n        results.push(data.responses[0]);\n        executeApi(index + 1);\n      });\n    };\n\n    executeApi(0);\n  }\n\n  // Function to search for a key in a JSON object\n  searchKeyInJson(obj: any, key: string): any {\n    if (!obj || typeof obj !== 'object') return null;\n    if (obj.hasOwnProperty(key)) return obj[key];\n\n    for (const k in obj) {\n      if (obj.hasOwnProperty(k) && typeof obj[k] === 'object') {\n        const result = this.searchKeyInJson(obj[k], key);\n        if (result) return result;\n      }\n    }\n\n    return null;\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,UAAU,GAAG,iCAAiC,CAAC,CAAE;EAEjB;;EAExCC,QAAQA,CAAA;IACN,MAAMC,OAAO,GAAG,EAAE;IAElB,MAAMC,UAAU,GAAIC,KAAa,IAAI;MACnC,IAAIA,KAAK,IAAI,IAAI,CAACC,IAAI,CAACC,MAAM,EAAE;QAC7B,IAAI,CAACC,SAAS,GAAGL,OAAO;QACxB;;MAGF,MAAMM,GAAG,GAAG,IAAI,CAACH,IAAI,CAACD,KAAK,CAAC;MAE5B;MACAI,GAAG,CAACC,WAAW,CAACC,OAAO,CAACC,UAAU,IAAG;QACnC,MAAMC,iBAAiB,GAAGV,OAAO,CAACS,UAAU,CAACE,cAAc,CAAC,CAACC,IAAI;QACjE,IAAIC,KAAK,GAAG,IAAI;QAChB,IAAI,OAAOH,iBAAiB,KAAK,QAAQ,EAAE;UACzCG,KAAK,GAAG,IAAI,CAACC,eAAe,CAACJ,iBAAiB,EAAED,UAAU,CAACM,SAAS,CAAC;SACtE,MAAM,IAAI,OAAOL,iBAAiB,KAAK,QAAQ,IAAIA,iBAAiB,CAACM,IAAI,EAAE,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;UAC5F;UACAC,WAAW,CAACR,iBAAiB,EAAE,CAACS,GAAG,EAAEC,MAAM,KAAI;YAC7C,IAAI,CAACD,GAAG,EAAE;cACRN,KAAK,GAAG,IAAI,CAACC,eAAe,CAACM,MAAM,EAAEX,UAAU,CAACM,SAAS,CAAC;;UAE9D,CAAC,CAAC;;QAEJ,IAAIF,KAAK,EAAE;UACT,MAAMQ,KAAK,GAAGf,GAAG,CAACgB,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKhB,UAAU,CAACgB,GAAG,CAAC;UAC5D,IAAIJ,KAAK,EAAE;YACTA,KAAK,CAACR,KAAK,GAAGA,KAAK;;;MAGzB,CAAC,CAAC;MAEF,MAAMa,YAAY,GAAG;QACnB,GAAGpB,GAAG;QACNM,IAAI,EAAEN,GAAG,CAACqB,MAAM,KAAK,MAAM,IAAIrB,GAAG,CAACqB,MAAM,KAAK,KAAK,GAAIrB,GAAG,CAACsB,QAAQ,GAAGtB,GAAG,CAACsB,QAAQ,GAAGtB,GAAG,CAACuB,OAAO,GAAI;OACrG;MAED,IAAI,CAACC,UAAU,CAAC/B,QAAQ,CAAC,CAAC2B,YAAY,CAAC,CAAC,CAACK,SAAS,CAAEC,IAAS,IAAI;QAC/DhC,OAAO,CAACiC,IAAI,CAACD,IAAI,CAAC3B,SAAS,CAAC,CAAC,CAAC,CAAC;QAC/BJ,UAAU,CAACC,KAAK,GAAG,CAAC,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC;IAEDD,UAAU,CAAC,CAAC,CAAC;EACf;EAEA;EACAa,eAAeA,CAACoB,GAAQ,EAAET,GAAW;IACnC,IAAI,CAACS,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,OAAO,IAAI;IAChD,IAAIA,GAAG,CAACC,cAAc,CAACV,GAAG,CAAC,EAAE,OAAOS,GAAG,CAACT,GAAG,CAAC;IAE5C,KAAK,MAAMW,CAAC,IAAIF,GAAG,EAAE;MACnB,IAAIA,GAAG,CAACC,cAAc,CAACC,CAAC,CAAC,IAAI,OAAOF,GAAG,CAACE,CAAC,CAAC,KAAK,QAAQ,EAAE;QACvD,MAAMhB,MAAM,GAAG,IAAI,CAACN,eAAe,CAACoB,GAAG,CAACE,CAAC,CAAC,EAAEX,GAAG,CAAC;QAChD,IAAIL,MAAM,EAAE,OAAOA,MAAM;;;IAI7B,OAAO,IAAI;EACb;EAAC,QAAAiB,CAAA,G;qBAlEU1C,UAAU,EAAA2C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAV/C,UAAU;IAAAgD,OAAA,EAAVhD,UAAU,CAAAiD,IAAA;IAAAC,UAAA,EAFT;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}