{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ApiIntegrationComponent = class ApiIntegrationComponent {\n  constructor(apiService) {\n    this.apiService = apiService;\n    this.apis = [{\n      method: 'GET',\n      url: '',\n      params: [],\n      headers: [],\n      jsonBody: '',\n      chainParams: []\n    }];\n    this.responses = [];\n  }\n  addApi() {\n    this.apis.push({\n      method: 'GET',\n      url: '',\n      params: [],\n      headers: [],\n      jsonBody: '',\n      chainParams: []\n    });\n  }\n  removeApi(index) {\n    this.apis.splice(index, 1);\n  }\n  runTests() {\n    const results = [];\n    const executeApi = index => {\n      if (index >= this.apis.length) {\n        this.responses = results;\n        return;\n      }\n      const api = this.apis[index];\n      // Replace chain parameters with actual values from the previous API response\n      if (index > 0) {\n        const previousApiResponse = results[index - 1].body;\n        api.chainParams.forEach(chainParam => {\n          const value = this.searchKeyInJson(previousApiResponse, chainParam.sourceKey);\n          if (value) {\n            const param = api.params.find(p => p.key === chainParam.key);\n            if (param) {\n              param.value = value;\n            }\n          }\n        });\n      }\n      const formattedApi = {\n        ...api,\n        body: api.method === 'POST' || api.method === 'PUT' ? api.jsonBody : ''\n      };\n      this.apiService.runTests([formattedApi]).subscribe(data => {\n        results.push(data.responses[0]);\n        executeApi(index + 1);\n      });\n    };\n    executeApi(0);\n  }\n  // Function to search for a key in a JSON object\n  searchKeyInJson(obj, key) {\n    if (!obj || typeof obj !== 'object') return null;\n    if (obj.hasOwnProperty(key)) return obj[key];\n    for (const k in obj) {\n      if (obj.hasOwnProperty(k) && typeof obj[k] === 'object') {\n        const result = this.searchKeyInJson(obj[k], key);\n        if (result) return result;\n      }\n    }\n    return null;\n  }\n};\nApiIntegrationComponent = __decorate([Component({\n  selector: 'app-api-integration',\n  templateUrl: './api-integration.component.html',\n  styleUrls: ['./api-integration.component.css']\n})], ApiIntegrationComponent);","map":{"version":3,"names":["Component","ApiIntegrationComponent","constructor","apiService","apis","method","url","params","headers","jsonBody","chainParams","responses","addApi","push","removeApi","index","splice","runTests","results","executeApi","length","api","previousApiResponse","body","forEach","chainParam","value","searchKeyInJson","sourceKey","param","find","p","key","formattedApi","subscribe","data","obj","hasOwnProperty","k","result","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/eddie/Local-Documents/API_test/frontend/src/app/add-api-form/add-api-form.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ApiService } from '../api.service';\n\ninterface ApiParam {\n  key: string;\n  value: string;\n}\n\ninterface ApiHeader {\n  key: string;\n  value: string;\n}\n\ninterface ChainParam {\n  key: string;\n  sourceKey: string;\n}\n\ninterface Api {\n  method: string;\n  url: string;\n  params: ApiParam[];\n  headers: ApiHeader[];\n  jsonBody: string;\n  chainParams: ChainParam[];\n}\n\ninterface ApiResponse {\n  body: any;\n  status_code: number;\n  content_type: string;\n}\n\n@Component({\n  selector: 'app-api-integration',\n  templateUrl: './api-integration.component.html',\n  styleUrls: ['./api-integration.component.css']\n})\nexport class ApiIntegrationComponent {\n  apis: Api[] = [\n    { method: 'GET', url: '', params: [], headers: [], jsonBody: '', chainParams: [] }\n  ];\n  responses: ApiResponse[] = [];\n\n  constructor(private apiService: ApiService) { }\n\n  addApi() {\n    this.apis.push({ method: 'GET', url: '', params: [], headers: [], jsonBody: '', chainParams: [] });\n  }\n\n  removeApi(index: number) {\n    this.apis.splice(index, 1);\n  }\n\n  runTests() {\n    const results: ApiResponse[] = [];\n\n    const executeApi = (index: number) => {\n      if (index >= this.apis.length) {\n        this.responses = results;\n        return;\n      }\n\n      const api = this.apis[index];\n\n      // Replace chain parameters with actual values from the previous API response\n      if (index > 0) {\n        const previousApiResponse = results[index - 1].body;\n        api.chainParams.forEach(chainParam => {\n          const value = this.searchKeyInJson(previousApiResponse, chainParam.sourceKey);\n          if (value) {\n            const param = api.params.find(p => p.key === chainParam.key);\n            if (param) {\n              param.value = value;\n            }\n          }\n        });\n      }\n\n      const formattedApi = {\n        ...api,\n        body: api.method === 'POST' || api.method === 'PUT' ? api.jsonBody : ''\n      };\n\n      this.apiService.runTests([formattedApi]).subscribe((data: { responses: ApiResponse[] }) => {\n        results.push(data.responses[0]);\n        executeApi(index + 1);\n      });\n    };\n\n    executeApi(0);\n  }\n\n  // Function to search for a key in a JSON object\n  searchKeyInJson(obj: any, key: string): any {\n    if (!obj || typeof obj !== 'object') return null;\n    if (obj.hasOwnProperty(key)) return obj[key];\n\n    for (const k in obj) {\n      if (obj.hasOwnProperty(k) && typeof obj[k] === 'object') {\n        const result = this.searchKeyInJson(obj[k], key);\n        if (result) return result;\n      }\n    }\n\n    return null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}